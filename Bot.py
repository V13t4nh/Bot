import streamlit as st



st.set_page_config(page_title="·ª®ng d·ª•ng ƒë∆∞·ª£c b·∫£o v·ªá")

# H√†m ki·ªÉm tra m·∫≠t kh·∫©u
def check_password():
    """Tr·∫£ v·ªÅ `True` n·∫øu ng∆∞·ªùi d√πng nh·∫≠p ƒë√∫ng m·∫≠t kh·∫©u."""
    
    # Kh·ªüi t·∫°o session_state
    if "password_correct" not in st.session_state:
        st.session_state["password_correct"] = False
    
    if st.session_state["password_correct"]:
        return True
    
    # Hi·ªÉn th·ªã form nh·∫≠p m·∫≠t kh·∫©u
    st.title("·ª®ng d·ª•ng c·∫ßn x√°c th·ª±c")
    password = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ truy c·∫≠p", type="password", key="password_input")
    
    if st.button("ƒêƒÉng nh·∫≠p"):
        if password == "m·∫≠t_kh·∫©u_c·ªßa_b·∫°n":  # Thay "m·∫≠t_kh·∫©u_c·ªßa_b·∫°n" b·∫±ng m·∫≠t kh·∫©u th·ª±c t·∫ø
            st.session_state["password_correct"] = True
            st.experimental_rerun()  # Quan tr·ªçng: kh·ªüi ch·∫°y l·∫°i ·ª©ng d·ª•ng
        else:
            st.error("‚ùå M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c. Vui l√≤ng th·ª≠ l·∫°i.")
    
    # Th√™m th√¥ng tin n·∫øu mu·ªën
    st.markdown("---")
    st.markdown("Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ nh·∫≠n m·∫≠t kh·∫©u.")
    
    return False

# Ki·ªÉm tra x√°c th·ª±c
if check_password():
    # CH·ªà hi·ªÉn th·ªã n·ªôi dung n√†y khi ƒë√£ x√°c th·ª±c th√†nh c√¥ng
    st.title("·ª®ng d·ª•ng ch√≠nh")
    st.success("üéâ X√°c th·ª±c th√†nh c√¥ng! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng.")
    
    # Th√™m n√∫t ƒëƒÉng xu·∫•t
    if st.button("ƒêƒÉng xu·∫•t"):
        st.session_state["password_correct"] = False
        st.experimental_rerun()



STATE_WEIGHTS = {
    "SQTT": 100, "QTT": 75, "XHT": 50, "CTT": 37.5, "T": 25,
    "SQTG": -100, "QTG": -75, "XHG": -50, "CTG": -37.5, "G": -25,
    "SW": 0, "MHT": 12.5, "MHG": -12.5
}

def calculate_p(timeframes, selected_states):
    total_weight = sum(STATE_WEIGHTS[selected_states[tf]] for tf in timeframes)
    num_frames = len(timeframes)
    return total_weight / num_frames if num_frames > 0 else 0

def calculate_p_region(price_entry, supports, resistances, p_large):
    min_distance = float('inf')
    nearest_level = None
    for level in supports + resistances:
        if abs(price_entry - level) < min_distance and level != 0 and level != 100000:
            min_distance = abs(price_entry - level)
            nearest_level = level
    
    if nearest_level in supports:
        if price_entry > nearest_level:  # Tr√™n h·ªó tr·ª£
            if p_large > 0:
                return 5
            elif p_large < 0:
                return -5
            else:
                return 2
        else:  # D∆∞·ªõi h·ªó tr·ª£ (gi·ªØa k√™nh)
            return 0
    elif nearest_level in resistances:
        if price_entry < nearest_level:  # D∆∞·ªõi kh√°ng c·ª±
            if p_large > 0:
                return -5
            elif p_large < 0:
                return 5
            else:
                return -2
        else:  # Tr√™n kh√°ng c·ª± (gi·ªØa k√™nh)
            return 0
    return 0

def classify_trend(p):
    if p >= 60:
        return "TƒÉng m·∫°nh"
    elif 40 <= p < 60:
        return "TƒÉng v·ª´a"
    elif -40 < p < 40:
        return "Sideway"
    elif -60 < p <= -40:
        return "Gi·∫£m v·ª´a"
    else:
        return "Gi·∫£m m·∫°nh"

def group_consecutive_frames(frames, states):
    if not frames:
        return []
    result = []
    start = frames[0]
    current_state = states[start]
    for i in range(1, len(frames)):
        if states[frames[i]] != current_state:
            if frames[i-1] == start:
                result.append(f"{start}: {current_state}")
            else:
                result.append(f"{start}-{frames[i-1]}: {current_state}")
            start = frames[i]
            current_state = states[start]
    if frames[-1] == start:
        result.append(f"{start}: {current_state}")
    else:
        result.append(f"{start}-{frames[-1]}: {current_state}")
    return result

st.markdown("""
    <style>
.stSelectbox > div > div > div {
    width: 100px !important;
    min-width: 100px !important;
}

.stSelectbox [data-baseweb="select"] svg {
    visibility: visible !important;
    display: block !important;
    color: #000 !important;
    opacity: 1 !important;
}

.stSelectbox [data-baseweb="select"] input {
    cursor: pointer !important;
    pointer-events: none !important;
}

.stSelectbox [data-baseweb="select"] {
    border: 1px solid #ced4da !important;
    border-radius: 4px !important;
    background-color: #f8f9fa !important;
}
    table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
        padding: 5px;
        text-align: center;
    }
    </style>
""", unsafe_allow_html=True)

st.title("Ph√¢n T√≠ch Xu H∆∞·ªõng")

st.header("TP & SL")

col1, col2 = st.columns(2)
with col1:
    st.markdown("**Equity ($)**")
    equity = st.number_input("", min_value=100.0, value=100000.0, key="equity", 
                            format="%.1f", step=100.0)
    
    st.markdown("**SL**")
    sl = st.number_input("", value=50380.0, key="sl", 
                         format="%.1f", step=1.0)

with col2:
    st.markdown("**Entry**")
    entry = st.number_input("", value=50420.0, key="entry", 
                           format="%.1f", step=1.0)
    
    st.markdown("**TP tham kh·∫£o**")
    tp = st.number_input("", value=0.0, key="tp", 
                        format="%.1f", step=1.0)

risk_amount = equity * 0.01
sl_percent = abs(entry - sl) / entry * 100 if entry != 0 else 0
position_size = risk_amount / (sl_percent / 100 * equity) if sl_percent > 0 else 0
st.write(f"Kh·ªëi l∆∞·ª£ng ƒë·ªÅ xu·∫•t: {position_size:.2f} lot")
if sl_percent > 5:
    st.warning("‚ö†Ô∏èV∆∞·ª£t ng∆∞·ª°ng r·ªßi ro 5%!")

st.subheader("Tr·∫°ng th√°i")
    
large_timeframes = ["W", "6D", "5D", "4D", "3D", "2D", "D", "H16", "H12"]
states = list(STATE_WEIGHTS.keys())

large_states = {}
for i in range(0, len(large_timeframes), 7):
    rows = st.columns(7)
    for j, col in enumerate(rows):
        if i + j < len(large_timeframes):
            tf = large_timeframes[i + j]
            large_states[tf] = col.selectbox(tf, states, index=states.index("SW"), key=f"large_{tf}")

small_timeframes = ["D", "H16", "H12", "H11", "H10", "H9", "H8", "H7", "H6", "H5", "H4", "H3", "H2", "H1"]

small_states = {}
for i in range(0, len(small_timeframes), 7):
    rows = st.columns(7)
    for j, col in enumerate(rows):
        if i + j < len(small_timeframes):
            tf = small_timeframes[i + j]
            small_states[tf] = col.selectbox(tf, states, index=states.index("SW"), key=f"small_{tf}")
st.header("Xu h∆∞·ªõng chung")


p_large = calculate_p(large_timeframes, large_states)
if all(state == "SW" for state in large_states.values()):
    st.warning("‚ö†Ô∏èT·∫•t c·∫£ khung l·ªõn l√† Sideway. Vui l√≤ng ch·ªçn tr·∫°ng th√°i kh√°c ƒë·ªÉ ph√¢n t√≠ch ch√≠nh x√°c h∆°n.")

increase_large = [tf for tf in large_timeframes if STATE_WEIGHTS[large_states[tf]] > 0]
decrease_large = [tf for tf in large_timeframes if STATE_WEIGHTS[large_states[tf]] < 0]
sideway_large = [tf for tf in large_timeframes if STATE_WEIGHTS[large_states[tf]] == 0]

increase_large_grouped = group_consecutive_frames(increase_large, large_states)
decrease_large_grouped = group_consecutive_frames(decrease_large, large_states)
sideway_large_grouped = group_consecutive_frames(sideway_large, large_states)

st.subheader("B·∫£ng ph√¢n lo·∫°i xu h∆∞·ªõng chung")
table_html = """
<table style="width:100%">
    <tr>
        <th>TƒÉng</th>
        <th>Gi·∫£m</th>
    </tr>
    <tr>
        <td>{}</td>
        <td>{}</td>
    </tr>
    <tr>
        <td colspan="2">Sideway: {}</td>
    </tr>
</table>
""".format(
    "<br>".join(increase_large_grouped) if increase_large_grouped else "Kh√¥ng c√≥",
    "<br>".join(decrease_large_grouped) if decrease_large_grouped else "Kh√¥ng c√≥",
    " | ".join(sideway_large_grouped) if sideway_large_grouped else "Kh√¥ng c√≥"
)
st.markdown(table_html, unsafe_allow_html=True)

trend_large = classify_trend(p_large)
st.write(f"**K·∫øt lu·∫≠n xu h∆∞·ªõng chung**: {trend_large} ({p_large:.2f}%)")
if trend_large == "Sideway":
    st.warning("‚ö†Ô∏èSW c·∫ßn t√≠n hi·ªáu x√°c nh·∫≠n tr∆∞·ªõc khi giao d·ªãch")
st.text_area("ƒê√°nh Gi√° (Xu h∆∞·ªõng chung)", max_chars=1000, key="large_assessment", height=200)

st.header("Khung th·ªùi gian nh·ªè")

p_small = calculate_p(small_timeframes, small_states)
if all(state == "SW" for state in small_states.values()):
    st.warning("‚ö†Ô∏èT·∫•t c·∫£ khung nh·ªè l√† Sideway. Vui l√≤ng ch·ªçn tr·∫°ng th√°i kh√°c ƒë·ªÉ ph√¢n t√≠ch ch√≠nh x√°c h∆°n.")

if p_large > 0 and p_small > 0:  
    p_small += 10
elif p_large < 0 and p_small < 0: 
    p_small -= 10 
elif p_large > 0 and p_small < 0:  
    p_small -= 20
elif p_large < 0 and p_small > 0:  
    st.warning("‚ö†Ô∏èR·ªßi ro tƒÉng 15%: Xu h∆∞·ªõng chung gi·∫£m nh∆∞ng s√≥ng ng·∫Øn h·∫°n tƒÉng.")

increase_small = [tf for tf in small_timeframes if STATE_WEIGHTS[small_states[tf]] > 0]
decrease_small = [tf for tf in small_timeframes if STATE_WEIGHTS[small_states[tf]] < 0]
sideway_small = [tf for tf in small_timeframes if STATE_WEIGHTS[small_states[tf]] == 0]

increase_small_grouped = group_consecutive_frames(increase_small, small_states)
decrease_small_grouped = group_consecutive_frames(decrease_small, small_states)
sideway_small_grouped = group_consecutive_frames(sideway_small, small_states)

st.subheader("B·∫£ng ph√¢n lo·∫°i xu h∆∞·ªõng nh·ªè")
table_html = """
<table style="width:100%">
    <tr>
        <th>TƒÉng</th>
        <th>Gi·∫£m</th>
    </tr>
    <tr>
        <td>{}</td>
        <td>{}</td>
    </tr>
    <tr>
        <td colspan="2">Sideway: {}</td>
    </tr>
</table>
""".format(
    "<br>".join(increase_small_grouped) if increase_small_grouped else "Kh√¥ng c√≥",
    "<br>".join(decrease_small_grouped) if decrease_small_grouped else "Kh√¥ng c√≥",
    " | ".join(sideway_small_grouped) if sideway_small_grouped else "Kh√¥ng c√≥"
)
st.markdown(table_html, unsafe_allow_html=True)

trend_small = classify_trend(p_small)
st.write(f"**K·∫øt lu·∫≠n xu h∆∞·ªõng nh·ªè**: {trend_small} ({p_small:.2f}%)")
if trend_small == "Sideway":
    st.warning("‚ö†Ô∏èB√°m v√†o c·∫•u tr√∫c s√≥ng ƒë·ªÉ v√†o l·ªánh, c·ª±c k·ª≥ c·∫©n tr·ªçng")
st.text_area("ƒê√°nh Gi√° (Xu h∆∞·ªõng nh·ªè)", max_chars=1000, key="small_assessment", height=200)

st.header("Nh·∫≠n ƒë·ªãnh t·ªïng h·ª£p")
if trend_large == trend_small:
    st.write("ƒê·ªìng Thu·∫≠n, K·ª≥ V·ªçng")
else:
    st.write(f"Xu h∆∞·ªõng chung: {trend_large}, Xu h∆∞·ªõng nh·ªè: {trend_small}")
    if "TƒÉng" in trend_large and "Gi·∫£m" in trend_small:
        st.write("Xu h∆∞·ªõng chung l√† TƒÉng, nh∆∞ng s√≥ng ng·∫Øn h·∫°n ƒëang ƒëi·ªÅu ch·ªânh. C·∫ßn x√°c nh·∫≠n t√≠n hi·ªáu ƒë·∫£o chi·ªÅu tr∆∞·ªõc khi v√†o l·ªánh.")
    elif "Gi·∫£m" in trend_large and "TƒÉng" in trend_small:
        st.write("Xu h∆∞·ªõng chung l√† Gi·∫£m, nh∆∞ng s√≥ng ng·∫Øn h·∫°n c√≥ d·∫•u hi·ªáu h·ªìi ph·ª•c. H√£y theo d√µi th√™m t√≠n hi·ªáu x√°c nh·∫≠n.")
    st.write("Ng∆∞·ª£c Pha, C·∫©n Tr·ªçng")
st.text_area("ƒê√°nh Gi√° (Nh·∫≠n ƒë·ªãnh t·ªïng h·ª£p)", max_chars=1000, key="summary_assessment", height=200)

st.header("V√πng gi√°")
st.text_area("ƒê√°nh Gi√° & K·ªãch B·∫£n", value="K·ªãch b·∫£n TƒÉng ‚Üí khung ƒë·∫£m b·∫£o c·∫•u tr√∫c tƒÉng, khung cho ph√©p tƒÉng l√† ?\nK·ªãch b·∫£n Gi·∫£m ‚Üí khung ƒë·∫£m b·∫£o c·∫•u tr√∫c gi·∫£m, khung cho ph√©p gi·∫£m l√† ?\nK·ªãch b·∫£n Sideway ‚Üí ƒëi·ªÅu ki·ªán x√°c nh·∫≠n ƒëi ngang?", max_chars=3000, key="region_assessment", height=400)
trendline = st.checkbox("Trendline")
col1, col2, col3 = st.columns(3)

with col1:
    resistance_1 = st.number_input("V√πng kh√°ng c·ª± 1", value=100000.0)
    support_1 = st.number_input("V√πng h·ªó tr·ª£ 1", value=3400.0)

with col2:
    resistance_2 = st.number_input("V√πng kh√°ng c·ª± 2", value=100000.0)
    support_2 = st.number_input("V√πng h·ªó tr·ª£ 2", value=100000.0)

with col3:
    resistance_3 = st.number_input("V√πng kh√°ng c·ª± 3", value=100000.0)
    support_3 = st.number_input("V√πng h·ªó tr·ª£ 3", value=100000.0)

supports = [s for s in [support_1, support_2, support_3] if s != 0 and s != 100000]
resistances = [r for r in [resistance_1, resistance_2, resistance_3] if r != 0 and r != 100000]
p_region = calculate_p_region(entry, supports, resistances, p_large)

p_total = (p_large * 0.6) + (p_small * 0.3) + (p_region * 0.1)

st.write(f"**T·ªïng: {p_total:.2f}%**")

st.header("H√†nh ƒë·ªông")
action = st.checkbox("H√†nh ƒê·ªông")
stand_out = st.checkbox("ƒê·ª©ng Ngo√†i")
if action:
    st.text_area("L√Ω Do", value="Entry c√≥ ƒë√∫ng t·∫°i Higher Low ho·∫∑c Lower High kh√¥ng?\nC√≥ b·ªã FOMO kh√¥ng?", max_chars=1000, key="action_reason")
elif stand_out:
    st.text_area("L√Ω Do", value="C·∫ßn quan s√°t k·ªπ khung n√†o?\nKho·∫£ng th·ªùi gian quan tr·ªçng c·∫ßn theo d√µi?", max_chars=1000, key="standout_reason")

st.header("T∆∞ duy giao d·ªãch")
cautious = st.checkbox("C·∫©n Tr·ªçng (gi·∫£m 50% Vol)", value=(trend_large != trend_small))
expectation = st.checkbox("K·ª≥ V·ªçng (Kh√¥ng s·ª£ rung c√¢y)", value=(trend_large == trend_small))

st.write(f"**T·ªïng: {p_total:.2f}%**")

st.header("ƒê·ªÅ xu·∫•t c·ªßa thu·∫≠t to√°n")
if p_total > 60:
    st.write("B·∫≠t c√¥ng t·∫Øc tham lam")
elif p_total < 40:
    st.write("B·∫≠t c√¥ng t·∫Øc c·∫©n tr·ªçng")
else:
    st.write("B·∫≠t c√¥ng t·∫Øc c·∫©n tr·ªçng v√† c√¥ng t·∫Øc kho·∫£ng th·ªùi gian")
